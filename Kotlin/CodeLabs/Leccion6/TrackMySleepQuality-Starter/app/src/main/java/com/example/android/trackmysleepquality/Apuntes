
Pasos para trabajar con Room

Para trabajar con Room tenemos que seguir los siguientes pasos:

1. Primero debemos importar las librerías necesarias.

2. Crear una data class que será la Entidad algo así como la tabla de una base de datos.
    -Esta clase tendrá la anotación @entity(tableName = nombre de la tabla).
    -La primaryKey tendrá la anotación @PrimaryKey y el resto de columnas @ColumnInfo

3. Creamos una interfaz con la anotación @DAO de Data Access Object.
    -El Dao implementará las sentencias que hacermos en la base de datos.
    -Las sentencias tendrán las anotaciones @Insert, @Update, @Delete, y el resto @Query

4. Creamos una abstract class con la anotación @Database(entities,version,etc.) y que hereda de RoomDatabase.
    -Creamos un abstrac val del tipo de Objeto del DAO correspondiente.
    -Creamos un companion object en el cual trabajaremos la instancia de la base de datos.
    -Creamos un var INSTANCE de la clase abstracta pero nulable.
    -Creamos un método getInstance con el cuál crearemos una instancia de la BD que reciba
    un context y devuelva una BD.
    -Introducimos to-do el cuerpo del método en un syncronized para que ningún otro hilo pueda
    acceder y así evitamos tener varias instancias de la misma BD.


 APUNTES DE CORUTINAS EN KOTLIN
 Para trabajar con corutinas en kotlin necesitamos los siguiente:

 -Importar las librerías para trabajar con viewModelScope, LifecycleScope y liveData.

 -Un Job: Básicamente, un trabajo es cualquier cosa que se pueda cancelar. Cada rutina tiene un trabajo,
  y puede usar el trabajo para cancelar la rutina. Los trabajos se pueden organizar en jerarquías padre-hijo.
  Cancelar un trabajo principal cancela inmediatamente todos los trabajos secundarios del trabajo,
  lo cual es mucho más conveniente que cancelar cada rutina manualmente.

 -Un Dispatcher:El despachador envía corrutinas para ejecutarse en varios subprocesos.
 Por ejemplo, Dispatchers.Main ejecuta tareas en el subproceso principal y Dispatchers.IO descarga
 las tareas de E/S de bloqueo en un grupo compartido de subprocesos.

 -Un Scope:el scope de una corrutina define el contexto en el que se ejecuta la corrutina.
 Un scope combina información sobre el trabajo de una corrutina y los despachadores.
 Los scope realizan un seguimiento de las corrutinas. Cuando inicia una corrutina,
 está "en un ámbito", lo que significa que ha indicado qué ámbito realizará un seguimiento de la corrutina.


 ViewModelScope
 Un ViewModelScope se define para cada ViewModel en su aplicación.
 Cualquier rutina lanzada en este scope se cancela automáticamente si ViewModel se borra.
 En este codelab se usará ViewModelScopepara iniciar las operaciones de la base de datos

 Room y Dispatchers
 Cuando se usa la biblioteca Room para realizar una operación de base de datos, Room usa Dispatchers.IO
 para realizar las operaciones de base de datos en un subproceso en segundo plano.
 No tienes que especificar explícitamente ninguno Dispatchers. Room hace esto por ti.